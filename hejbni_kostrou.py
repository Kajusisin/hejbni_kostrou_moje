from flask import Flask, render_template, request, redirect, url_for, flash, jsonify, session, send_from_directory
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate
from db_config import db, DATABASE_URI
from models import Zak, Discipline, Score, StudentScore, SkolniRok, Odkaz, Informace, Soubor
from import_zaci import import_zaci
from import_skolni_roky import import_skolni_roky
from import_bodovaci_databaze import import_excel, FORMATY_DISCIPLIN, convert_value
import pandas as pd
import os
import re
from dotenv import load_dotenv
from datetime import datetime
from werkzeug.utils import secure_filename
from sqlalchemy.sql import func
from sqlalchemy import desc, asc, and_, or_
import logging
import os
from logging.handlers import RotatingFileHandler

# ‚úÖ Naƒçten√≠ bezpeƒçn√Ωch promƒõnn√Ωch
load_dotenv()

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = DATABASE_URI
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['UPLOAD_FOLDER'] = 'static/uploads'  
app.config['ALLOWED_EXTENSIONS'] = {'pdf', 'docx', 'png', 'jpg', 'jpeg', 'gif', 'xlsx', 'pptx', 'txt', 'csv', 'zip', 'rar', 'mp4', 'mp3'}
app.secret_key = os.getenv("SECRET_KEY", "tajnyklic")  # üîë Pou≈æit√≠ bezpeƒçnƒõj≈°√≠ho zp≈Øsobu

# P≈ôidejte toto po inicializaci aplikace (p≈ôed app.config['UPLOAD_FOLDER'])
app.config['SESSION_TYPE'] = 'filesystem'
app.secret_key = os.getenv("SECRET_KEY", "hejbni_kostrou_secret_key")

# Vytvo≈ôen√≠ adres√°≈ôe pro uploady, pokud neexistuje
uploads_dir = os.path.join(app.root_path, app.config['UPLOAD_FOLDER'])
if not os.path.exists(uploads_dir):
    os.makedirs(uploads_dir)
    print(f"‚úÖ Vytvo≈ôena slo≈æka pro nahr√°v√°n√≠ soubor≈Ø: {uploads_dir}")

# Inicializace datab√°ze a migrac√≠
db.init_app(app)
migrate = Migrate(app, db)

# ‚úÖ Funkce pro povolen√© form√°ty soubor≈Ø
def allowed_file(filename):
    """Ovƒõ≈ô√≠, zda m√° soubor povolenou p≈ô√≠ponu a neobsahuje neplatn√© znaky."""
    if not filename or "." not in filename:
        return False
    return filename.rsplit(".", 1)[1].lower() in app.config['ALLOWED_EXTENSIONS']

# Nastaven√≠ loggeru
def setup_logger():
    log_dir = os.path.join(app.root_path, 'logs')
    os.makedirs(log_dir, exist_ok=True)
    
    log_file = os.path.join(log_dir, 'app.log')
    handler = RotatingFileHandler(log_file, maxBytes=10000000, backupCount=5)
    
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    handler.setFormatter(formatter)
    
    app.logger.addHandler(handler)
    app.logger.setLevel(logging.INFO)
    
    app.logger.info('Aplikace spu≈°tƒõna')

# Zavolat tuto funkci po vytvo≈ôen√≠ aplikace
setup_logger()

@app.route("/")
def home():
    skolni_roky = SkolniRok.query.order_by(SkolniRok.rok_od.asc()).all()
    if not skolni_roky:
        flash("‚ùå ≈Ω√°dn√© ≈°koln√≠ roky nejsou dostupn√© v datab√°zi!", "warning")
    return render_template("home.html", skolni_roky=skolni_roky)

@app.route('/tridy')
def zobraz_tridy():
    """Zobrazen√≠ seznamu v≈°ech t≈ô√≠d."""
    try:
        # Naƒçten√≠ aktu√°ln√≠ho ≈°koln√≠ho roku
        vybrany_skolni_rok = session.get('vybrany_skolni_rok_od', datetime.now().year)
        
        # P≈ôevod na int, pokud je to rok ve form√°tu 2023/2024
        if isinstance(vybrany_skolni_rok, str) and "/" in vybrany_skolni_rok:
            vybrany_skolni_rok = int(vybrany_skolni_rok.split("/")[0])
        
        # Z√≠sk√°n√≠ v≈°ech ≈æ√°k≈Ø
        vsichni_zaci = Zak.query.all()
        
        # Slovn√≠ky pro aktivn√≠ t≈ô√≠dy a absolventy
        aktivni_tridy = {}  # {(cislo, pismeno): pocet_zaku}
        absolventi_tridy = {}  # {(cislo, pismeno, rok_odchodu): pocet_zaku}
        
        # Proch√°zen√≠ v≈°ech ≈æ√°k≈Ø
        for zak in vsichni_zaci:
            rocnik = vybrany_skolni_rok - zak.rok_nastupu_2_stupen + 6
            
            # Aktivn√≠ ≈æ√°ci (6. - 9. t≈ô√≠da)
            if 6 <= rocnik <= 9:
                pismeno = zak.pismeno_tridy
                if pismeno and pismeno.startswith('.'):
                    pismeno = pismeno[1:]
                    
                tridni_klic = (rocnik, pismeno)
                if tridni_klic not in aktivni_tridy:
                    aktivni_tridy[tridni_klic] = 0
                aktivni_tridy[tridni_klic] += 1
            
            # Absolventi (opustili u≈æ ≈°kolu)
            elif rocnik > 9 and zak.skolni_rok_odchodu_od:
                pismeno = zak.pismeno_tridy
                if pismeno and pismeno.startswith('.'):
                    pismeno = pismeno[1:]
                    
                absolventi_klic = (9, pismeno, zak.skolni_rok_odchodu_od)
                if absolventi_klic not in absolventi_tridy:
                    absolventi_tridy[absolventi_klic] = 0
                absolventi_tridy[absolventi_klic] += 1
        
        # Se≈ôazen√≠ t≈ô√≠d
        tridni_seznam = sorted(aktivni_tridy.items(), key=lambda x: (x[0][0], x[0][1]))
        absolventi_seznam = sorted(absolventi_tridy.items(), key=lambda x: (-x[0][2], x[0][1]))  # Sestupnƒõ podle roku
        
        return render_template(
            'trida.html', 
            tridni_seznam=[(t[0][0], t[0][1], t[1]) for t in tridni_seznam],
            absolventi_tridy=[(a[0][0], a[0][1], a[0][2], a[1]) for a in absolventi_seznam],
            vybrany_rok=vybrany_skolni_rok
        )
        
    except Exception as e:
        print(f"‚ùå Chyba p≈ôi zobrazen√≠ t≈ô√≠d: {e}")
        return render_template('error.html', error=str(e))

# P≈ôidejte tuto route pro zpƒõtnou kompatibilitu
@app.route("/zobraz_tridy")
def zobraz_tridy_alt():
    """Alternativn√≠ cesta pro zobrazen√≠ t≈ô√≠d."""
    return redirect(url_for("zobraz_tridy"))

@app.route("/detail_tridy/<int:cislo>/<string:pismeno>")
@app.route("/detail_tridy/<int:cislo>/<string:pismeno>/<int:rok>")
@app.route("/detail_tridy/<int:cislo>/<string:pismeno>/<int:rok>/<int:absolvent_rok>")
def detail_tridy(cislo, pismeno, rok=None, absolvent_rok=None):
    """Zobraz√≠ detail konkr√©tn√≠ t≈ô√≠dy vƒçetnƒõ seznamu ≈æ√°k≈Ø."""
    try:
        # Zpracov√°n√≠ roku - pokud nen√≠ zad√°n, pou≈æijeme aktu√°ln√≠ ≈°koln√≠ rok
        if rok is None:
            rok = session.get('vybrany_skolni_rok_od', datetime.now().year)
            
        # P≈ôevod na int, pokud je to rok ve form√°tu 2023/2024
        if isinstance(rok, str) and "/" in rok:
            rok = int(rok.split("/")[0])
            
        rok = int(rok)  # Zajist√≠me, ≈æe rok je int
        
        # Zobrazovan√© p√≠smeno (pro p≈ô√≠pad, ≈æe by v URL mƒõlo teƒçku)
        zobrazene_pismeno = pismeno
        if zobrazene_pismeno.startswith('.'):
            zobrazene_pismeno = zobrazene_pismeno[1:]
        
        # Standardnƒõ zobrazujeme ≈æ√°ky v dan√© t≈ô√≠dƒõ pro tento ≈°koln√≠ rok
        if not absolvent_rok:
            # V√Ωpoƒçet roku n√°stupu
            rok_nastupu = rok - cislo + 6
            
            # Naƒçten√≠ ≈æ√°k≈Ø, kte≈ô√≠ jsou v t√©to t≈ô√≠dƒõ
            zaci = Zak.query.filter(
                Zak.rok_nastupu_2_stupen == rok_nastupu
            ).all()
            
            # Dodateƒçn√© filtrov√°n√≠ podle p√≠smena t≈ô√≠dy
            zaci_filtrovani = []
            for zak in zaci:
                zak_pismeno = zak.pismeno_tridy
                if zak_pismeno and zak_pismeno.startswith('.'):
                    zak_pismeno = zak_pismeno[1:]
                
                if zak_pismeno == zobrazene_pismeno:
                    zaci_filtrovani.append(zak)
            
            zaci = zaci_filtrovani
            
            # N√°zev t≈ô√≠dy
            trida_nazev = f"{cislo}.{zobrazene_pismeno}"
        
        # Pro absolventy zobraz√≠me ≈æ√°ky, kte≈ô√≠ ode≈°li v dan√©m roce
        else:
            # P≈ôevod form√°tu absolventsk√©ho roku
            if isinstance(absolvent_rok, str) and "/" in absolvent_rok:
                absolvent_rok = int(absolvent_rok.split("/")[0])
            else:
                absolvent_rok = int(absolvent_rok)
            
            # Naƒçten√≠ ≈æ√°k≈Ø, kte≈ô√≠ absolvovali v dan√©m roce
            zaci = Zak.query.filter(
                Zak.skolni_rok_odchodu_od == absolvent_rok
            ).all()
            
            # Dodateƒçn√© filtrov√°n√≠ podle p√≠smena t≈ô√≠dy
            zaci_filtrovani = []
            for zak in zaci:
                zak_pismeno = zak.pismeno_tridy
                if zak_pismeno and zak_pismeno.startswith('.'):
                    zak_pismeno = zak_pismeno[1:]
                
                if zak_pismeno == zobrazene_pismeno:
                    zaci_filtrovani.append(zak)
            
            zaci = zaci_filtrovani
            
            trida_nazev = f"9.{zobrazene_pismeno} - Absolventi {absolvent_rok}"  # Upraveno - pouze rok
        
        # ≈òazen√≠ ≈æ√°k≈Ø podle p≈ô√≠jmen√≠ a jm√©na
        zaci.sort(key=lambda x: (x.prijmeni, x.jmeno))
        
        # Rozdƒõlen√≠ ≈æ√°k≈Ø na chlapce a d√≠vky pro lep≈°√≠ zobrazen√≠
        # Vylep≈°en√° logika pro spr√°vn√© rozpozn√°n√≠ pohlav√≠
        chlapci = []
        divky = []
        
        for z in zaci:
            # Pokud pohlavi je None, pou≈æijeme bezpeƒçnou hodnotu
            pohlav√≠ = z.pohlavi.lower() if z.pohlavi else ""
            
            # Kontrola v≈°ech mo≈æn√Ωch hodnot pro chlapce
            if pohlav√≠ in ["chlapec", "hoch", "mu≈æ", "m", "male", "boy", "kluk"]:
                chlapci.append(z)
            # Kontrola v≈°ech mo≈æn√Ωch hodnot pro d√≠vky
            elif pohlav√≠ in ["divka", "d√≠vka", "f", "female", "dievƒça", "girl", "holka", "≈æena"]:
                divky.append(z)
            else:
                # Pro nejasn√© p≈ô√≠pady, pou≈æijeme defaultn√≠ za≈ôazen√≠ (nap≈ô. podle jm√©na)
                # Alternativnƒõ m≈Ø≈æeme p≈ôidat do log≈Ø a upozornit na probl√©m
                print(f"‚ùó Nerozpozn√°no pohlav√≠ '{z.pohlavi}' u ≈æ√°ka {z.jmeno} {z.prijmeni}")
                
                # Jednoduch√° heuristika - pokud jm√©no konƒç√≠ na 'a', pravdƒõpodobnƒõ jde o d√≠vku
                if z.jmeno.lower().endswith("a"):
                    divky.append(z)
                else:
                    chlapci.append(z)
        
        # P≈ôed√°me vybrany_rok do ≈°ablony pro spr√°vn√© zobrazen√≠
        vybrany_rok = rok
        
        # Debug log pro kontrolu poƒçt≈Ø
        print(f"üîç T≈ô√≠da {cislo}.{zobrazene_pismeno}: celkem {len(zaci)} ≈æ√°k≈Ø, {len(chlapci)} chlapc≈Ø, {len(divky)} d√≠vek")
        
        return render_template(
            'detail_tridy.html', 
            trida_nazev=trida_nazev,
            zaci=zaci,
            chlapci=chlapci,  # P≈ôid√°no pro p≈ôehledn√© zobrazen√≠
            divky=divky,      # P≈ôid√°no pro p≈ôehledn√© zobrazen√≠
            cislo=cislo,
            pismeno=zobrazene_pismeno,
            absolventi=(absolvent_rok is not None),
            rok_odchodu=absolvent_rok,
            vybrany_rok=vybrany_rok  # Toto je d≈Øle≈æit√© - p≈ôed√°v√°me promƒõnnou do ≈°ablony
        )
    
    except Exception as e:
        print(f"‚ùå Chyba p≈ôi zobrazen√≠ detailu t≈ô√≠dy: {e}")
        return render_template('error.html', error=str(e))

@app.route('/detail_tridy_alt/<int:cislo>/<string:pismeno>/<int:rok>', methods=['GET'])
def detail_tridy_alt(cislo, pismeno, rok=None):
    try:
        # Pokud nen√≠ rok specifikov√°n v URL, pou≈æijeme aktu√°ln√≠ rok ze session
        vybrany_rok = session.get('skolni_rok') if rok is None else f"{rok}/{rok+1}"
        
        # Pou≈æijeme existuj√≠c√≠ detail_tridy funkci
        return detail_tridy(cislo, pismeno, rok)
    except Exception as e:
        app.logger.error(f"‚ùå Chyba p≈ôi zobrazen√≠ detailu t≈ô√≠dy: {str(e)}")
        return render_template('error.html', message=f"Chyba p≈ôi zobrazen√≠ detailu t≈ô√≠dy: {str(e)}")

@app.route("/zmen_skolni_rok", methods=["POST"])
def zmen_skolni_rok():
    """Zmƒõn√≠ aktu√°ln√≠ ≈°koln√≠ rok a p≈ôesune ≈æ√°ky do spr√°vn√Ωch t≈ô√≠d."""
    data = request.get_json()
    print(f"üü° P≈ôijat√° data: {data}")  

    novy_rok = data.get("rok")
    if not novy_rok:
        return jsonify({"error": "‚ùå Nebyl zad√°n ≈æ√°dn√Ω rok!"}), 400

    try:
        rok_od = int(novy_rok.split("/")[0])
        rok_do = int(novy_rok.split("/")[1]) if "/" in novy_rok else rok_od + 1
    except ValueError:
        return jsonify({"error": "‚ùå Neplatn√Ω form√°t roku!"}), 400

    # ‚úÖ Nastaven√≠ roku do session pro pou≈æit√≠ na dal≈°√≠ch str√°nk√°ch
    # Toto je kl√≠ƒçov√© pro spr√°vn√© fungov√°n√≠ str√°nky trida.html
    session['vybrany_skolni_rok_od'] = rok_od
    session['vybrany_skolni_rok_do'] = rok_do

    skolni_rok = SkolniRok.query.filter_by(rok_od=rok_od).first()
    if not skolni_rok:
        return jsonify({"error": f"‚ùå ≈†koln√≠ rok {novy_rok} nebyl nalezen!"}), 404

    # ‚úÖ Aktualizace aktu√°ln√≠ho ≈°koln√≠ho roku
    SkolniRok.nastav_aktualni_rok(rok_od)

    # ‚úÖ Posunut√≠ ≈æ√°k≈Ø do spr√°vn√Ωch t≈ô√≠d
    posunout_zaky_podle_skolniho_roku(rok_od)

    print(f"‚úÖ ≈†koln√≠ rok zmƒõnƒõn na {novy_rok}!")
    return jsonify({
        "message": f"≈†koln√≠ rok zmƒõnƒõn na {novy_rok}!",
        "reload": True  # P≈ôid√°me sign√°l pro refresh str√°nky
    })

def posunout_zaky_podle_skolniho_roku(rok_od):
    """Posune ≈æ√°ky do spr√°vn√©ho roƒçn√≠ku podle vybran√©ho ≈°koln√≠ho roku."""
    try:
        for zak in Zak.query.all():
            # V√Ωpoƒçet roƒçn√≠ku: aktu√°ln√≠ rok - rok n√°stupu + 6 (6. t≈ô√≠da je prvn√≠ roƒçn√≠k 2. stupnƒõ)
            rocnik = rok_od - zak.rok_nastupu_2_stupen + 6  

            if 6 <= rocnik <= 9:
                # ≈Ω√°ci 6.-9. t≈ô√≠dy
                zak.cislo_tridy = rocnik
                # Zachov√°me p√≠smeno t≈ô√≠dy nebo nastav√≠me v√Ωchoz√≠ "A"
                zak.pismeno_tridy = zak.pismeno_tridy or "A"

            elif rocnik > 9:
                # Absolventi (ji≈æ ode≈°li ze ≈°koly)
                # Ponech√°me posledn√≠ t≈ô√≠du jako 9
                zak.cislo_tridy = 9
                # Nastav√≠me rok odchodu, pokud je≈°tƒõ nen√≠ nastaven
                if not zak.skolni_rok_odchodu_od:
                    zak.skolni_rok_odchodu_od = rok_od - (rocnik - 9)
                    zak.skolni_rok_odchodu_do = zak.skolni_rok_odchodu_od + 1

            elif rocnik < 6:
                # ≈Ω√°ci, kte≈ô√≠ je≈°tƒõ nenastoupili na 2. stupe≈à
                zak.cislo_tridy = None
                zak.pismeno_tridy = None
                
        db.session.commit()
        print(f"‚úÖ ≈Ω√°ci posunuti pro ≈°koln√≠ rok {rok_od}/{rok_od+1}")
        return True
    
    except Exception as e:
        db.session.rollback()
        print(f"‚ùå Chyba p≈ôi posouv√°n√≠ ≈æ√°k≈Ø: {e}")
        return False

@app.context_processor
def inject_skolni_rok():
    """P≈ôed√°v√° aktu√°ln√≠ ≈°koln√≠ rok do v≈°ech ≈°ablon."""
    aktualni_rok = SkolniRok.query.filter_by(aktualni=True).first()
    return {"aktualni_rok": f"{aktualni_rok.rok_od}/{aktualni_rok.rok_do}" if aktualni_rok else "Nezn√°m√Ω"}

@app.route("/zaci")
def zobraz_zaky():
    """Zobraz√≠ seznam v≈°ech ≈æ√°k≈Ø s mo≈ænost√≠ filtrace."""
    try:
        # Z√≠sk√°n√≠ v≈°ech ≈æ√°k≈Ø a aktu√°ln√≠ho ≈°koln√≠ho roku
        zaky = Zak.query.order_by(Zak.prijmeni, Zak.jmeno).all()
        print(f"üü¢ DEBUG: Naƒçteno {len(zaky)} ≈æ√°k≈Ø.")
        
        # Aktu√°ln√≠ ≈°koln√≠ rok
        aktualni_rok_obj = SkolniRok.query.filter_by(aktualni=True).first()
        vybrany_skolni_rok = request.args.get("rok")
        
        # Pokud nen√≠ vybr√°n rok v URL, pou≈æijeme aktu√°ln√≠
        if not vybrany_skolni_rok and aktualni_rok_obj:
            vybrany_skolni_rok = aktualni_rok_obj.rok_od
        elif not vybrany_skolni_rok:
            # Pokud nem√°me ani aktu√°ln√≠ rok, pou≈æijeme aktu√°ln√≠ rok
            from datetime import datetime
            current_year = datetime.now().year
            vybrany_skolni_rok = current_year
        
        # P≈ôev√©st na int, pokud je ve form√°tu "2025/2026"
        if isinstance(vybrany_skolni_rok, str) and "/" in vybrany_skolni_rok:
            vybrany_skolni_rok = int(vybrany_skolni_rok.split("/")[0])
        else:
            vybrany_skolni_rok = int(vybrany_skolni_rok)
        
        # P≈ôed√°me oba roky do ≈°ablony
        return render_template(
            "zaci.html", 
            zaky=zaky,
            aktualni_rok=aktualni_rok_obj,
            vybrany_skolni_rok=vybrany_skolni_rok
        )
    except Exception as e:
        print(f"‚ùå Chyba p≈ôi zobrazen√≠ ≈æ√°k≈Ø: {e}")
        return render_template("error.html", error=str(e))

@app.route("/detail_tridy")
def seznam_trid():
    """Tento endpoint pouze p≈ôesmƒõruje na spr√°vnou str√°nku t≈ô√≠d."""
    return redirect(url_for("zobraz_tridy"))

@app.route("/discipliny")
def discipliny():
    """Zobrazen√≠ seznamu v≈°ech discipl√≠n s mo≈ænost√≠ proch√°zen√≠ t≈ô√≠d."""
    try:
        # Z√≠sk√°n√≠ v≈°ech discipl√≠n
        disciplines = Discipline.query.all()
        
        # Z√≠sk√°n√≠ v≈°ech ≈°koln√≠ch rok≈Ø pro select
        skolni_roky = SkolniRok.query.order_by(SkolniRok.rok_od.asc()).all()
        
        return render_template(
            "discipliny.html",
            disciplines=disciplines,
            skolni_roky=skolni_roky
        )
    except Exception as e:
        flash(f"‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ discipl√≠n: {str(e)}", "error")
        return redirect(url_for("home"))

@app.route("/get_classes_for_discipline")
def get_classes_for_discipline():
    """API koncov√Ω bod pro z√≠sk√°n√≠ t≈ô√≠d s ≈æ√°ky, kte≈ô√≠ maj√≠ z√°znamy v dan√© discipl√≠nƒõ."""
    discipline_id = request.args.get("discipline_id", type=int)
    skolni_rok = request.args.get("skolni_rok", "")
    
    if not discipline_id:
        return jsonify({"error": "Chyb√≠ ID discipl√≠ny"}), 400
    
    try:
        # P≈ôevod roku na int - prvn√≠ ƒç√°st z "2024/2025"
        rok_od = int(skolni_rok.split("/")[0]) if "/" in skolni_rok else int(skolni_rok)
        
        # Z√≠sk√°n√≠ v≈°ech ≈æ√°k≈Ø pro dan√Ω ≈°koln√≠ rok
        zaci = Zak.query.all()
        
        # Seznam t≈ô√≠d (nap≈ô√≠klad 6.A, 7.B, atd.)
        classes = set()
        
        for zak in zaci:
            rocnik = rok_od - zak.rok_nastupu_2_stupen + 6
            
            # Pokud je ≈æ√°k v 6.-9. t≈ô√≠dƒõ
            if 6 <= rocnik <= 9:
                pismeno = zak.pismeno_tridy
                if pismeno and pismeno.startswith('.'):
                    pismeno = pismeno[1:]
                
                if pismeno:
                    trida = f"{rocnik}.{pismeno}"
                    classes.add(trida)
        
        # Se≈ôazen√≠ t≈ô√≠d
        sorted_classes = sorted(list(classes), key=lambda x: (int(x.split('.')[0]), x.split('.')[1]))
        
        return jsonify({"classes": sorted_classes})
    
    except Exception as e:
        app.logger.error(f"Chyba p≈ôi z√≠sk√°v√°n√≠ t≈ô√≠d: {str(e)}")
        return jsonify({"error": str(e)}), 500

@app.route("/get_discipline_name")
def get_discipline_name():
    """API koncov√Ω bod pro z√≠sk√°n√≠ n√°zvu discipl√≠ny podle ID."""
    discipline_id = request.args.get("discipline_id", type=int)
    
    if not discipline_id:
        return jsonify({"error": "Chyb√≠ ID discipl√≠ny"}), 400
    
    try:
        discipline = Discipline.query.get(discipline_id)
        if not discipline:
            return jsonify({"error": "Discipl√≠na nenalezena"}), 404
        
        return jsonify({"name": discipline.nazev})
    
    except Exception as e:
        app.logger.error(f"Chyba p≈ôi z√≠sk√°v√°n√≠ n√°zvu discipl√≠ny: {str(e)}")
        return jsonify({"error": str(e)}), 500

@app.route("/get_students_performances")
def get_students_performances():
    """API koncov√Ω bod pro z√≠sk√°n√≠ ≈æ√°k≈Ø a jejich v√Ωkon≈Ø pro danou t≈ô√≠du, pohlav√≠ a discipl√≠nu."""
    discipline_id = request.args.get("discipline_id", type=int)
    class_name = request.args.get("class", "")
    gender = request.args.get("gender", "")
    skolni_rok = request.args.get("skolni_rok", "")
    
    if not discipline_id or not class_name or not gender or not skolni_rok:
        return jsonify({"error": "Chyb√≠ povinn√© parametry"}), 400
    
    try:
        # Rozparsov√°n√≠ t≈ô√≠dy na ƒç√≠slo a p√≠smeno
        cislo_tridy, pismeno_tridy = class_name.split(".")
        cislo_tridy = int(cislo_tridy)
        
        # P≈ôevod roku na int - prvn√≠ ƒç√°st z "2024/2025"
        rok_od = int(skolni_rok.split("/")[0]) if "/" in skolni_rok else int(skolni_rok)
        
        # V√Ωpoƒçet roku n√°stupu pro danou t≈ô√≠du
        rok_nastupu = rok_od - cislo_tridy + 6
        
        # Z√≠sk√°n√≠ discipl√≠ny
        discipline = Discipline.query.get(discipline_id)
        if not discipline:
            return jsonify({"error": "Discipl√≠na nenalezena"}), 404
        
        # Z√≠sk√°n√≠ ≈æ√°k≈Ø v dan√© t≈ô√≠dƒõ
        zaci = Zak.query.filter(
            Zak.rok_nastupu_2_stupen == rok_nastupu,
            Zak.pismeno_tridy.in_([pismeno_tridy, f".{pismeno_tridy}"]),
            Zak.pohlavi == gender
        ).order_by(Zak.prijmeni, Zak.jmeno).all()
        
        # Seznam ≈æ√°k≈Ø s jejich v√Ωkony
        students = []
        
        for zak in zaci:
            # Kontrola v√Ωkonu v datab√°zi
            student_score = StudentScore.query.filter_by(
                zak_id=zak.id,
                discipline_id=discipline_id,
                rocnik=cislo_tridy,
                skolni_rok=rok_od
            ).first()
            
            students.append({
                "id": zak.id,
                "jmeno": zak.jmeno,
                "prijmeni": zak.prijmeni,
                "vykon": student_score.vykon if student_score else "",
                "body": student_score.body if student_score else "0"
            })
        
        return jsonify({
            "students": students,
            "jednotka": discipline.jednotka,
            "napoveda": discipline.napoveda
        })
    
    except Exception as e:
        app.logger.error(f"Chyba p≈ôi z√≠sk√°v√°n√≠ ≈æ√°k≈Ø a v√Ωkon≈Ø: {str(e)}")
        return jsonify({"error": str(e)}), 500

@app.route("/ulozit_vykony_hromadne", methods=["POST"])
def ulozit_vykony_hromadne():
    """API koncov√Ω bod pro hromadn√© ulo≈æen√≠ v√Ωkon≈Ø ≈æ√°k≈Ø."""
    data = request.get_json()
    
    if not data or "performances" not in data:
        return jsonify({"success": False, "error": "Chybƒõj√≠c√≠ data"}), 400
    
    performances = data["performances"]
    
    try:
        # Poƒç√≠tadlo √∫spƒõ≈°nƒõ ulo≈æen√Ωch v√Ωkon≈Ø
        saved_count = 0
        error_count = 0
        error_messages = []
        
        for performance in performances:
            zak_id = performance.get("zak_id")
            discipline_id = performance.get("discipline_id")
            rocnik = performance.get("rocnik")
            vykon = performance.get("vykon", "").strip()
            skolni_rok = performance.get("skolni_rok")
            
            # Kontrola povinn√Ωch pol√≠
            if not zak_id or not discipline_id or not rocnik or not skolni_rok:
                error_count += 1
                error_messages.append(f"Chyb√≠ povinn√© parametry pro v√Ωkon {zak_id}/{discipline_id}")
                continue
            
            try:
                # P≈ôevod na spr√°vn√© datov√© typy
                zak_id = int(zak_id)
                discipline_id = int(discipline_id)
                rocnik = int(rocnik)
                skolni_rok = int(skolni_rok)
                
                # Pokud je v√Ωkon pr√°zdn√Ω, sma≈æeme z√°znam
                if not vykon:
                    student_score = StudentScore.query.filter_by(
                        zak_id=zak_id, 
                        discipline_id=discipline_id, 
                        rocnik=rocnik,
                        skolni_rok=skolni_rok
                    ).first()
                    
                    if student_score:
                        db.session.delete(student_score)
                        saved_count += 1
                    continue
                
                # Z√≠sk√°n√≠ discipl√≠ny
                discipline = Discipline.query.get(discipline_id)
                if not discipline:
                    error_count += 1
                    error_messages.append(f"Discipl√≠na ID {discipline_id} nebyla nalezena")
                    continue
                
                # Z√≠sk√°n√≠ bod≈Ø pro zadan√Ω v√Ωkon
                format_type = FORMATY_DISCIPLIN.get(discipline.nazev, "float")
                
                try:
                    vykon_formatovany = convert_value(vykon, format_type)
                except ValueError as e:
                    error_count += 1
                    error_messages.append(f"Neplatn√Ω form√°t v√Ωkonu: {vykon}")
                    continue
                
                score = None
                
                # Pou≈æit√≠ bod≈Ø z v√Ωkonu, pokud existuj√≠
                if "body" in performance and performance["body"]:
                    body = int(performance["body"])
                else:
                    # Hled√°n√≠ bod≈Ø v bodovac√≠ tabulce
                    if format_type == "str":
                        score = Score.query.filter_by(discipline_id=discipline_id, vykon=str(vykon_formatovany)).first()
                    else:
                        score = Score.query.filter_by(discipline_id=discipline_id, vykon=str(vykon_formatovany)).first()
                    
                    if not score:
                        error_count += 1
                        error_messages.append(f"Pro v√Ωkon {vykon} nebyly nalezeny ≈æ√°dn√© body")
                        continue
                    
                    body = score.body
                
                # Kontrola, zda u≈æ existuje z√°znam
                student_score = StudentScore.query.filter_by(
                    zak_id=zak_id, 
                    discipline_id=discipline_id, 
                    rocnik=rocnik,
                    skolni_rok=skolni_rok
                ).first()
                
                if student_score:
                    # Aktualizace existuj√≠c√≠ho z√°znamu
                    student_score.vykon = vykon
                    student_score.body = body
                else:
                    # Vytvo≈ôen√≠ nov√©ho z√°znamu
                    student_score = StudentScore(
                        zak_id=zak_id,
                        discipline_id=discipline_id,
                        vykon=vykon,
                        body=body,
                        rocnik=rocnik,
                        skolni_rok=skolni_rok
                    )
                    db.session.add(student_score)
                
                saved_count += 1
            
            except Exception as e:
                error_count += 1
                error_messages.append(f"Chyba p≈ôi ukl√°d√°n√≠ v√Ωkonu {vykon}: {str(e)}")
                continue
        
        # Ulo≈æen√≠ v≈°ech zmƒõn
        db.session.commit()
        
        message = f"√öspƒõ≈°nƒõ ulo≈æeno {saved_count} v√Ωkon≈Ø"
        if error_count > 0:
            message += f", {error_count} v√Ωkon≈Ø se nepoda≈ôilo ulo≈æit"
        
        app.logger.info(f"‚úÖ {message}")
        
        return jsonify({
            "success": True,
            "message": message,
            "saved_count": saved_count,
            "error_count": error_count,
            "errors": error_messages[:5]  # Omez√≠me poƒçet chybov√Ωch zpr√°v
        })
    
    except Exception as e:
        db.session.rollback()
        app.logger.error(f"‚ùå Chyba p≈ôi ukl√°d√°n√≠ v√Ωkon≈Ø: {str(e)}")
        return jsonify({
            "success": False, 
            "error": f"Chyba p≈ôi ukl√°d√°n√≠ v√Ωkon≈Ø: {str(e)}"
        }), 500

@app.route("/get_student_performance")
def get_student_performance():
    """API koncov√Ω bod pro z√≠sk√°n√≠ v√Ωkonu ≈æ√°ka."""
    try:
        zak_id = request.args.get("zak_id", type=int)
        discipline_id = request.args.get("discipline_id", type=int)
        
        if not zak_id or not discipline_id:
            return jsonify({"error": "Chyb√≠ povinn√© parametry"}), 400
            
        # Z√≠sk√°n√≠ v√Ωkonu ≈æ√°ka
        student_score = StudentScore.query.filter_by(
            zak_id=zak_id,
            discipline_id=discipline_id
        ).order_by(StudentScore.skolni_rok.desc()).first()
        
        if student_score:
            return jsonify({
                "success": True,
                "vykon": student_score.vykon,
                "body": student_score.body
            })
        else:
            return jsonify({"success": True, "vykon": None, "body": 0})
            
    except Exception as e:
        app.logger.error(f"Chyba p≈ôi z√≠sk√°v√°n√≠ v√Ωkonu ≈æ√°ka: {str(e)}")
        return jsonify({"error": str(e)}), 500

@app.route("/ulozit_vykon", methods=["POST"])
def ulozit_vykon():
    """API koncov√Ω bod pro ulo≈æen√≠ v√Ωkonu jednoho ≈æ√°ka."""
    data = request.get_json()
    app.logger.info(f"üîç DEBUG: P≈ôijata data pro ulo≈æen√≠ v√Ωkonu: {data}")
    
    if not data:
        return jsonify({"success": False, "error": "≈Ω√°dn√° data nebyla poskytnuta"}), 400
    
    zak_id = data.get("zak_id")
    discipline_id = data.get("discipline_id")
    rocnik = data.get("rocnik")
    vykon = data.get("vykon")
    
    if not zak_id or not discipline_id or not rocnik:
        return jsonify({"success": False, "error": "Chyb√≠ povinn√© parametry"}), 400
    
    try:
        # P≈ôevod na spr√°vn√© datov√© typy
        zak_id = int(zak_id)
        discipline_id = int(discipline_id)
        rocnik = int(rocnik)
        
        # Z√≠sk√°n√≠ aktu√°ln√≠ho ≈°koln√≠ho roku z session
        skolni_rok = session.get('vybrany_skolni_rok_od')
        if not skolni_rok:
            # Z√≠sk√°me ≈°koln√≠ rok z datab√°ze
            aktualni_rok = SkolniRok.query.filter_by(aktualni=True).first()
            if aktualni_rok:
                skolni_rok = aktualni_rok.rok_od
            else:
                # Pokud nen√≠ nalezen ≈æ√°dn√Ω ≈°koln√≠ rok, pou≈æijeme aktu√°ln√≠ rok
                skolni_rok = datetime.now().year
        
        # P≈ôevod na int, pokud je to rok ve form√°tu 2023/2024
        if isinstance(skolni_rok, str) and "/" in skolni_rok:
            skolni_rok = int(skolni_rok.split("/")[0])
        
        # Z√≠sk√°n√≠ discipl√≠ny
        discipline = Discipline.query.get(discipline_id)
        if not discipline:
            return jsonify({"success": False, "error": "Discipl√≠na nebyla nalezena"}), 404
        
        # Pr√°zdn√Ω v√Ωkon = smaz√°n√≠ z√°znamu
        if vykon is None or not str(vykon).strip():
            # Najdeme existuj√≠c√≠ z√°znam a sma≈æeme ho
            student_score = StudentScore.query.filter_by(
                zak_id=zak_id, 
                discipline_id=discipline_id, 
                rocnik=rocnik,
                skolni_rok=skolni_rok
            ).first()
            
            if student_score:
                db.session.delete(student_score)
                db.session.commit()
                return jsonify({"success": True, "body": 0, "message": "V√Ωkon byl smaz√°n"})
            else:
                return jsonify({"success": True, "body": 0, "message": "≈Ω√°dn√Ω v√Ωkon k smaz√°n√≠"})
        
        # Z√≠sk√°n√≠ bod≈Ø pro zadan√Ω v√Ωkon
        format_type = FORMATY_DISCIPLIN.get(discipline.nazev, "float")
        
        try:
            vykon_formatovany = convert_value(vykon, format_type)
        except ValueError as e:
            return jsonify({"success": False, "error": f"Neplatn√Ω form√°t v√Ωkonu: {str(e)}"}), 400
        
        score = None
        
        # Hled√°n√≠ bod≈Ø v bodovac√≠ tabulce
        if format_type == "str":
            score = Score.query.filter_by(discipline_id=discipline_id, vykon=str(vykon_formatovany)).first()
        else:
            score = Score.query.filter_by(discipline_id=discipline_id, vykon=str(vykon_formatovany)).first()
        
        if not score:
            return jsonify({"success": False, "error": "Pro tento v√Ωkon nebyly nalezeny ≈æ√°dn√© body"}), 404
        
        # Kontrola, zda ji≈æ existuje z√°znam
        student_score = StudentScore.query.filter_by(
            zak_id=zak_id, 
            discipline_id=discipline_id, 
            rocnik=rocnik,
            skolni_rok=skolni_rok
        ).first()
        
        if student_score:
            # Aktualizace existuj√≠c√≠ho z√°znamu
            student_score.vykon = vykon
            student_score.body = score.body
        else:
            # Vytvo≈ôen√≠ nov√©ho z√°znamu
            student_score = StudentScore(
                zak_id=zak_id,
                discipline_id=discipline_id,
                vykon=vykon,
                body=score.body,
                rocnik=rocnik,
                skolni_rok=skolni_rok
            )
            db.session.add(student_score)
        
        db.session.commit()
        
        app.logger.info(f"‚úÖ V√Ωkon ulo≈æen - ≈æ√°k:{zak_id}, discipl√≠na:{discipline_id}, roƒçn√≠k:{rocnik}, hodnota:{vykon}, body:{score.body}")
        
        return jsonify({
            "success": True,
            "body": score.body,
            "message": "V√Ωkon byl √∫spƒõ≈°nƒõ ulo≈æen"
        })
    
    except Exception as e:
        db.session.rollback()
        app.logger.error(f"‚ùå Chyba p≈ôi ukl√°d√°n√≠ v√Ωkonu: {str(e)}")
        return jsonify({"success": False, "error": f"Chyba p≈ôi ukl√°d√°n√≠ v√Ωkonu: {str(e)}"}), 500

@app.route("/zebricky_a_statistiky")
def zebricky_a_statistiky():
    """Zobraz√≠ str√°nku s ≈æeb≈ô√≠ƒçky a statistikami s re√°ln√Ωmi daty."""
    try:
        # Z√≠sk√°n√≠ parametr≈Ø filtr≈Ø z URL
        selected_rocnik = request.args.get("rocnik", "all")
        selected_skolni_rok = request.args.get("skolni_rok", "")

        # P≈ôid√°n√≠ logov√°n√≠ pro lep≈°√≠ diagnostiku
        app.logger.info(f"üîç Naƒç√≠t√°n√≠ ≈æeb≈ô√≠ƒçk≈Ø - roƒçn√≠k: {selected_rocnik}, ≈°koln√≠ rok: {selected_skolni_rok}")
        
        # Pokud nen√≠ zad√°n ≈°koln√≠ rok, pou≈æijeme aktu√°ln√≠
        if not selected_skolni_rok:
            aktualni_rok_obj = SkolniRok.query.filter_by(aktualni=True).first()
            if aktualni_rok_obj:
                selected_skolni_rok = f"{aktualni_rok_obj.rok_od}/{aktualni_rok_obj.rok_do}"
        
        # P≈ôeveden√≠ ≈°koln√≠ho roku na ƒç√≠slo pro filtrov√°n√≠
        try:
            rok_od = int(selected_skolni_rok.split("/")[0]) if "/" in selected_skolni_rok else int(selected_skolni_rok)
        except (ValueError, TypeError) as e:
            app.logger.error(f"‚ùå Chyba p≈ôi zpracov√°n√≠ ≈°koln√≠ho roku '{selected_skolni_rok}': {e}")
            rok_od = datetime.now().year  # Fallback na aktu√°ln√≠ rok

        # 1. Z√≠sk√°n√≠ nejlep≈°√≠ch ≈æ√°k≈Ø podle pr≈Ømƒõrn√©ho poƒçtu bod≈Ø
        top_chlapci = db.session.query(
            Zak.id, Zak.jmeno, Zak.prijmeni, Zak.rok_nastupu_2_stupen, Zak.pismeno_tridy,
            func.avg(StudentScore.body).label('prumer_bodu')
        ).join(StudentScore, Zak.id == StudentScore.zak_id)\
         .filter(Zak.pohlavi.in_(["chlapec", "hoch", "mu≈æ", "m", "male", "boy", "kluk"]))
        
        # Filtrov√°n√≠ podle ≈°koln√≠ho roku
        top_chlapci = top_chlapci.filter(StudentScore.skolni_rok == rok_od)
        
        # Filtrov√°n√≠ podle roƒçn√≠ku
        if selected_rocnik != "all":
            top_chlapci = top_chlapci.filter(StudentScore.rocnik == int(selected_rocnik))
        
        # Dokonƒçen√≠ dotazu
        top_chlapci = top_chlapci.group_by(Zak.id)\
                                 .order_by(desc('prumer_bodu'))\
                                 .limit(10).all()
        
        # Form√°tov√°n√≠ v√Ωsledk≈Ø chlapc≈Ø
        formatted_top_chlapci = []
        for zak_id, jmeno, prijmeni, rok_nastupu, pismeno_tridy, prumer_bodu in top_chlapci:
            # V√Ωpoƒçet t≈ô√≠dy
            rocnik = rok_od - rok_nastupu + 6
            if 6 <= rocnik <= 9:
                trida = f"{rocnik}.{pismeno_tridy}" if pismeno_tridy else f"{rocnik}"
            else:
                trida = "Absolvent" if rocnik > 9 else "P≈ôed n√°stupem"
            
            formatted_top_chlapci.append({
                "jmeno": f"{jmeno} {prijmeni}",
                "trida": trida,
                "prumer_bodu": round(prumer_bodu, 1)
            })
        
        # Podobn√Ω dotaz pro d√≠vky
        top_divky = db.session.query(
            Zak.id, Zak.jmeno, Zak.prijmeni, Zak.rok_nastupu_2_stupen, Zak.pismeno_tridy,
            func.avg(StudentScore.body).label('prumer_bodu')
        ).join(StudentScore, Zak.id == StudentScore.zak_id)\
         .filter(Zak.pohlavi.in_(["divka", "d√≠vka", "f", "female", "dievƒça", "girl", "holka", "≈æena"]))
        
        # Filtrov√°n√≠ podle ≈°koln√≠ho roku
        top_divky = top_divky.filter(StudentScore.skolni_rok == rok_od)
        
        # Filtrov√°n√≠ podle roƒçn√≠ku
        if selected_rocnik != "all":
            top_divky = top_divky.filter(StudentScore.rocnik == int(selected_rocnik))
        
        # Dokonƒçen√≠ dotazu
        top_divky = top_divky.group_by(Zak.id)\
                              .order_by(desc('prumer_bodu'))\
                              .limit(10).all()
        
        # Form√°tov√°n√≠ v√Ωsledk≈Ø d√≠vek
        formatted_top_divky = []
        for zak_id, jmeno, prijmeni, rok_nastupu, pismeno_tridy, prumer_bodu in top_divky:
            rocnik = rok_od - rok_nastupu + 6
            if 6 <= rocnik <= 9:
                trida = f"{rocnik}.{pismeno_tridy}" if pismeno_tridy else f"{rocnik}"
            else:
                trida = "Absolvent" if rocnik > 9 else "P≈ôed n√°stupem"
                
            formatted_top_divky.append({
                "jmeno": f"{jmeno} {prijmeni}",
                "trida": trida,
                "prumer_bodu": round(prumer_bodu, 1)
            })
        
        # 2. Z√≠sk√°n√≠ discipl√≠n pro z√°lo≈æky
        disciplines = Discipline.query.all()
        
        # 3. Z√≠sk√°n√≠ nejlep≈°√≠ch v√Ωkon≈Ø pro ka≈ædou discipl√≠nu
        discipline_performances = {}
        
        for discipline in disciplines:
            # Z√≠sk√°n√≠ nejlep≈°√≠ch v√Ωkon≈Ø pro chlapce
            chlapci_vysledky = db.session.query(
                Zak.id, Zak.jmeno, Zak.prijmeni, Zak.rok_nastupu_2_stupen, Zak.pismeno_tridy,
                StudentScore.vykon, StudentScore.rocnik, StudentScore.skolni_rok
            ).join(StudentScore, Zak.id == StudentScore.zak_id)\
             .filter(StudentScore.discipline_id == discipline.id)\
             .filter(Zak.pohlavi.in_(["chlapec", "hoch", "mu≈æ", "m", "male", "boy", "kluk"]))\
             .filter(StudentScore.skolni_rok == rok_od)
            
            if selected_rocnik != "all":
                chlapci_vysledky = chlapci_vysledky.filter(StudentScore.rocnik == int(selected_rocnik))
            
            # Se≈ôazen√≠ podle v√Ωkon≈Ø z√°vis√≠ na discipl√≠nƒõ (nƒõkter√© discipl√≠ny maj√≠ ni≈æ≈°√≠ hodnotu = lep≈°√≠ v√Ωsledek)
            # Zde bychom pot≈ôebovali logiku pro ka≈ædou discipl√≠nu
            chlapci_vysledky = chlapci_vysledky.order_by(asc(StudentScore.vykon) if discipline.nazev in ["Bƒõh 60m", "Bƒõh 1000m"] else desc(StudentScore.vykon))\
                                               .limit(5).all()
            
            # Form√°tov√°n√≠ v√Ωsledk≈Ø chlapc≈Ø pro discipl√≠nu
            formatted_chlapci = []
            for zak_id, jmeno, prijmeni, rok_nastupu, pismeno_tridy, vykon, rocnik, skolni_rok in chlapci_vysledky:
                if 6 <= rocnik <= 9:
                    trida = f"{rocnik}.{pismeno_tridy}" if pismeno_tridy else f"{rocnik}"
                else:
                    trida = "Absolvent" if rocnik > 9 else "P≈ôed n√°stupem"
                
                formatted_chlapci.append({
                    "jmeno": f"{jmeno} {prijmeni}",
                    "trida": trida,
                    "vykon": vykon,
                    "skolni_rok": f"{skolni_rok}/{skolni_rok + 1}"
                })
            
            # Podobn√Ω proces pro d√≠vky
            divky_vysledky = db.session.query(
                Zak.id, Zak.jmeno, Zak.prijmeni, Zak.rok_nastupu_2_stupen, Zak.pismeno_tridy,
                StudentScore.vykon, StudentScore.rocnik, StudentScore.skolni_rok
            ).join(StudentScore, Zak.id == StudentScore.zak_id)\
             .filter(StudentScore.discipline_id == discipline.id)\
             .filter(Zak.pohlavi.in_(["divka", "d√≠vka", "f", "female", "dievƒça", "girl", "holka", "≈æena"]))\
             .filter(StudentScore.skolni_rok == rok_od)
             
            if selected_rocnik != "all":
                divky_vysledky = divky_vysledky.filter(StudentScore.rocnik == int(selected_rocnik))
                
            divky_vysledky = divky_vysledky.order_by(asc(StudentScore.vykon) if discipline.nazev in ["Bƒõh 60m", "Bƒõh 600m"] else desc(StudentScore.vykon))\
                                           .limit(5).all()
            
            # Form√°tov√°n√≠ v√Ωsledk≈Ø d√≠vek pro discipl√≠nu
            formatted_divky = []
            for zak_id, jmeno, prijmeni, rok_nastupu, pismeno_tridy, vykon, rocnik, skolni_rok in divky_vysledky:
                if 6 <= rocnik <= 9:
                    trida = f"{rocnik}.{pismeno_tridy}" if pismeno_tridy else f"{rocnik}"
                else:
                    trida = "Absolvent" if rocnik > 9 else "P≈ôed n√°stupem"
                
                formatted_divky.append({
                    "jmeno": f"{jmeno} {prijmeni}",
                    "trida": trida,
                    "vykon": vykon,
                    "skolni_rok": f"{skolni_rok}/{skolni_rok + 1}"
                })
            
            # Ulo≈æen√≠ v√Ωsledk≈Ø pro discipl√≠nu
            discipline_performances[discipline.nazev] = {
                "chlapci": formatted_chlapci,
                "divky": formatted_divky,
                "jednotka": discipline.jednotka
            }
        
        # 4. Z√≠sk√°n√≠ rekord≈Ø a statistik
        
        # 4.1 Aktu√°ln√≠ rekordy
        aktualni_rekordy = {
            "chlapci": {},
            "divky": {}
        }
        
        for discipline in disciplines:
            # Rekordy chlapc≈Ø
            rekord_chlapci = db.session.query(
                Zak.jmeno, Zak.prijmeni, Zak.rok_nastupu_2_stupen, Zak.pismeno_tridy,
                StudentScore.vykon, StudentScore.rocnik
            ).join(StudentScore, Zak.id == StudentScore.zak_id)\
             .filter(StudentScore.discipline_id == discipline.id)\
             .filter(Zak.pohlavi.in_(["chlapec", "hoch", "mu≈æ", "m", "male", "boy", "kluk"]))\
             .filter(StudentScore.skolni_rok == rok_od)
            
            if selected_rocnik != "all":
                rekord_chlapci = rekord_chlapci.filter(StudentScore.rocnik == int(selected_rocnik))
                
            rekord_chlapci = rekord_chlapci.order_by(asc(StudentScore.vykon) if discipline.nazev in ["Bƒõh 60m", "Bƒõh 1000m"] else desc(StudentScore.vykon))\
                                          .first()
            
            if rekord_chlapci:
                jmeno, prijmeni, rok_nastupu, pismeno_tridy, vykon, rocnik = rekord_chlapci
                trida = f"{rocnik}.{pismeno_tridy}" if pismeno_tridy else f"{rocnik}"
                
                aktualni_rekordy["chlapci"][discipline.nazev] = {
                    "jmeno": f"{jmeno} {prijmeni}",
                    "trida": trida,
                    "vykon": vykon
                }
            
            # Rekordy d√≠vek - obdobn√Ω proces
            rekord_divky = db.session.query(
                Zak.jmeno, Zak.prijmeni, Zak.rok_nastupu_2_stupen, Zak.pismeno_tridy,
                StudentScore.vykon, StudentScore.rocnik
            ).join(StudentScore, Zak.id == StudentScore.zak_id)\
             .filter(StudentScore.discipline_id == discipline.id)\
             .filter(Zak.pohlavi.in_(["divka", "d√≠vka", "f", "female", "dievƒça", "girl", "holka", "≈æena"]))\
             .filter(StudentScore.skolni_rok == rok_od)
            
            if selected_rocnik != "all":
                rekord_divky = rekord_divky.filter(StudentScore.rocnik == int(selected_rocnik))
                
            rekord_divky = rekord_divky.order_by(asc(StudentScore.vykon) if discipline.nazev in ["Bƒõh 60m", "Bƒõh 600m"] else desc(StudentScore.vykon))\
                                        .first()
            
            if rekord_divky:
                jmeno, prijmeni, rok_nastupu, pismeno_tridy, vykon, rocnik = rekord_divky
                trida = f"{rocnik}.{pismeno_tridy}" if pismeno_tridy else f"{rocnik}"
                
                aktualni_rekordy["divky"][discipline.nazev] = {
                    "jmeno": f"{jmeno} {prijmeni}",
                    "trida": trida,
                    "vykon": vykon
                }
        
        # 4.2 Historick√© rekordy - obdobnƒõ jako aktu√°ln√≠ rekordy, ale bez filtru na ≈°koln√≠ rok
        
        # 5. Statistiky t≈ô√≠d - pr≈Ømƒõrn√© body
        tridy_statistiky = db.session.query(
            StudentScore.rocnik, 
            Zak.pismeno_tridy, 
            func.avg(StudentScore.body).label('prumer_bodu'),
            func.count(func.distinct(Zak.id)).label('pocet_zaku')
        ).join(Zak, StudentScore.zak_id == Zak.id)\
         .filter(StudentScore.skolni_rok == rok_od)
        
        if selected_rocnik != "all":
            tridy_statistiky = tridy_statistiky.filter(StudentScore.rocnik == int(selected_rocnik))
            
        tridy_statistiky = tridy_statistiky.group_by(StudentScore.rocnik, Zak.pismeno_tridy)\
                                          .order_by(desc('prumer_bodu'))\
                                          .all()
        
        formatted_tridy_statistiky = []
        for rocnik, pismeno_tridy, prumer_bodu, pocet_zaku in tridy_statistiky:
            if pismeno_tridy:
                trida = f"{rocnik}.{pismeno_tridy}"
                formatted_tridy_statistiky.append({
                    "trida": trida,
                    "prumer_bodu": round(prumer_bodu, 1),
                    "pocet_zaku": pocet_zaku
                })
        
        # 6. Osobn√≠ rekordy ≈æ√°ka
        zak_id = request.args.get("zak_id", None)
        osobni_rekordy = None
        vsichni_zaci = []

        # Z√≠sk√°n√≠ v≈°ech ≈æ√°k≈Ø pro seznam bez ohledu na v√Ωbƒõr konkr√©tn√≠ho ≈æ√°ka
        try:
            vsichni_zaci = Zak.query.order_by(Zak.prijmeni, Zak.jmeno).all() 
        except Exception as e:
            app.logger.error(f"‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ seznamu ≈æ√°k≈Ø: {e}")
            vsichni_zaci = []  # Pr√°zdn√Ω seznam v p≈ô√≠padƒõ chyby
        
        # Zpracov√°n√≠ osobn√≠ch rekord≈Ø pouze pokud je zvolen ≈æ√°k
        if zak_id:
            try:
                zak_id_int = int(zak_id)  # Bezpeƒçn√© p≈ôeveden√≠ na int
                zak = Zak.query.get(zak_id_int)
                
                if zak:
                    osobni_rekordy = {
                        "jmeno": f"{zak.jmeno} {zak.prijmeni}",
                        "discipliny": {}
                    }
                    
                    for discipline in disciplines:
                        # Nejlep≈°√≠ v√Ωkon ≈æ√°ka v discipl√≠nƒõ
                        try:
                            nejlepsi_vykon = db.session.query(
                                StudentScore.vykon, 
                                StudentScore.rocnik, 
                                StudentScore.skolni_rok,
                                StudentScore.body
                            ).filter(
                                StudentScore.zak_id == zak_id_int,
                                StudentScore.discipline_id == discipline.id
                            ).order_by(
                                asc(StudentScore.vykon) if discipline.nazev in ["Bƒõh 60m", "Bƒõh 600m", "Bƒõh 1000m"] else desc(StudentScore.vykon)
                            ).first()
                            
                            if nejlepsi_vykon:
                                vykon, rocnik, skolni_rok, body = nejlepsi_vykon
                                osobni_rekordy["discipliny"][discipline.nazev] = {
                                    "vykon": vykon,
                                    "rocnik": rocnik,
                                    "skolni_rok": f"{skolni_rok}/{skolni_rok+1}" if skolni_rok else "Nezn√°m√Ω",
                                    "body": body,
                                    "jednotka": discipline.jednotka
                                }
                        except Exception as e:
                            app.logger.error(f"‚ùå Chyba p≈ôi z√≠sk√°v√°n√≠ v√Ωkonu ≈æ√°ka {zak_id} pro discipl√≠nu {discipline.nazev}: {e}")
                else:
                    app.logger.warning(f"‚ö†Ô∏è ≈Ω√°k s ID {zak_id} nebyl nalezen")
            except ValueError:
                app.logger.error(f"‚ùå Neplatn√© ID ≈æ√°ka: {zak_id}")
        
        # P≈ôed√°n√≠ dat do ≈°ablony - d≈Øle≈æit√° je kontrola, aby v≈°echny oƒçek√°van√© parametry existovaly
        return render_template(
            "zebricky_a_statistiky.html",
            top_chlapci=formatted_top_chlapci or [],
            top_divky=formatted_top_divky or [],
            discipline_performances=discipline_performances or {},
            disciplines=disciplines or [],
            aktualni_rekordy=aktualni_rekordy or {"chlapci": {}, "divky": {}},
            tridy_statistiky=formatted_tridy_statistiky or [],
            osobni_rekordy=osobni_rekordy,  # M≈Ø≈æe b√Ωt None
            selected_rocnik=selected_rocnik,
            selected_skolni_rok=selected_skolni_rok,
            skolni_roky=SkolniRok.query.order_by(SkolniRok.rok_od.desc()).all() or [],
            vsichni_zaci=vsichni_zaci,
            vybrany_rocnik=selected_rocnik,
            vybrany_skolni_rok=selected_skolni_rok,
            vybrany_zak_id=zak_id
        )
            
    except Exception as e:
        app.logger.error(f"‚ùå Chyba v zebricky_a_statistiky: {str(e)}", exc_info=True)
        return render_template("error.html", error=str(e))

@app.route("/vyhledat")
def vyhledat_zaka():
    """Vyhled√° ≈æ√°ky podle zadan√©ho dotazu."""
    query = request.args.get("query", "").strip()
    
    # Z√≠sk√°n√≠ aktu√°ln√≠ho ≈°koln√≠ho roku
    from datetime import datetime
    aktualni_rok_obj = SkolniRok.query.filter_by(aktualni=True).first()
    vybrany_skolni_rok = session.get('vybrany_skolni_rok_od') or (
        aktualni_rok_obj.rok_od if aktualni_rok_obj else datetime.now().year
    )
    
    # P≈ôev√©st na int, pokud je ve form√°tu "2025/2026"
    if isinstance(vybrany_skolni_rok, str) and "/" in vybrany_skolni_rok:
        vybrany_skolni_rok = int(vybrany_skolni_rok.split("/")[0])
    
    # Vyhled√°n√≠ ≈æ√°k≈Ø podle dotazu
    if query:
        # Hled√°me v jm√©nƒõ nebo p≈ô√≠jmen√≠ (bez ohledu na velikost p√≠smen)
        zaky = Zak.query.filter(
            db.or_(
                Zak.jmeno.ilike(f"%{query}%"),
                Zak.prijmeni.ilike(f"%{query}%")
            )
        ).order_by(Zak.prijmeni, Zak.jmeno).all()
    else:
        zaky = []
    
    return render_template(
        "vyhledani.html", 
        zaky=zaky, 
        query=query,
        vybrany_skolni_rok=vybrany_skolni_rok
    )

@app.route("/synchronizovat_rok", methods=["POST"])
def synchronizovat_rok():
    """Synchronizuje ≈°koln√≠ rok mezi localStorage a session."""
    data = request.get_json()
    rok = data.get("rok")
    if rok:
        if "/" in rok:
            rok_od = int(rok.split("/")[0])
            rok_do = int(rok.split("/")[1])
        else:
            rok_od = int(rok)
            rok_do = rok_od + 1
        
        session['vybrany_skolni_rok_od'] = rok_od
        session['vybrany_skolni_rok_do'] = rok_do
        
        return jsonify({"success": True})
    return jsonify({"error": "Neplatn√Ω rok"}), 400

@app.route("/zak/<int:zak_id>")
def detail_zaka(zak_id):
    """Zobraz√≠ detailn√≠ informace o ≈æ√°kovi."""
    try:
        zak = Zak.query.get(int(zak_id))
        
        disciplines = Discipline.query.all()
        
        # Z√≠sk√°n√≠ vybran√©ho ≈°koln√≠ho roku z session
        aktualni_rok_obj = SkolniRok.query.filter_by(aktualni=True).first()
        vybrany_skolni_rok = session.get('vybrany_skolni_rok_od') or (
            aktualni_rok_obj.rok_od if aktualni_rok_obj else datetime.now().year
        )
        
        if isinstance(vybrany_skolni_rok, str) and "/" in vybrany_skolni_rok:
            try:
                vybrany_skolni_rok = int(vybrany_skolni_rok.split("/")[0])
            except ValueError:
                flash("‚ùå Neplatn√Ω form√°t ≈°koln√≠ho roku!", "error")
                return redirect(url_for("zobraz_zaky"))
        else:
            vybrany_skolni_rok = int(vybrany_skolni_rok)

        # V√Ωpoƒçet roƒçn√≠ku ≈æ√°ka
        rocnik = vybrany_skolni_rok - zak.rok_nastupu_2_stupen + 6

        # Pokud je ≈æ√°k absolvent, nastav√≠me roƒçn√≠k na 9
        if rocnik > 9:
            rocnik = 9

        # V√Ωpoƒçet bodov√Ωch rozmez√≠ pro zn√°mky
        bodove_rozmezi = vypocet_rozmezi_bodu(zak.pohlavi, rocnik)

        # Naƒçten√≠ v√Ωkon≈Ø ≈æ√°ka
        vykony = StudentScore.query.filter_by(zak_id=zak.id).all()
        
        # Naƒçten√≠ v√Ωsledk≈Ø pro odpov√≠daj√≠c√≠ roƒçn√≠k a ≈°koln√≠ rok
        scores_by_grade = {}
        if rocnik and 6 <= rocnik <= 9:
            scores_by_grade[rocnik] = StudentScore.query.filter_by(
                zak_id=zak_id, 
                rocnik=rocnik,
                skolni_rok=vybrany_skolni_rok
            ).all()
            
            # Pro zpƒõtnou kompatibilitu - pokud nejsou data se ≈°koln√≠m rokem
            if not scores_by_grade[rocnik]:
                scores_by_grade[rocnik] = StudentScore.query.filter_by(
                    zak_id=zak_id, 
                    rocnik=rocnik,
                    skolni_rok=None
                ).all()
        
        return render_template(
            "detail_zaka.html",
            zak=zak,
            disciplines=disciplines,
            vykony=vykony,
            vybrany_skolni_rok=vybrany_skolni_rok,
            scores_by_grade=scores_by_grade,
            aktualni_rok=f"{vybrany_skolni_rok}/{vybrany_skolni_rok+1}",
            bodove_rozmezi=bodove_rozmezi,
            vypocet_znamky=vypocet_znamky
        )
    except Exception as e:
        app.logger.error(f"‚ùå Chyba p≈ôi zobrazen√≠ detailu ≈æ√°ka: {str(e)}")
        flash(f"Chyba p≈ôi naƒç√≠t√°n√≠ detailu ≈æ√°ka: {str(e)}", "error")
        return redirect(url_for("zobraz_zaky"))

def vypocet_rozmezi_bodu(pohlavi, rocnik):
    """
    Vypoƒç√≠t√° rozmez√≠ bod≈Ø pro zn√°mky na z√°kladƒõ pohlav√≠ a roƒçn√≠ku.
    """
    base_reference = 130 if pohlavi.lower() == "chlapec" else 110  # V√Ωchoz√≠ hodnoty
    reference_value = base_reference * (0.9 ** (9 - rocnik))  # P≈ôizp≈Øsoben√≠ podle roƒçn√≠ku

    # Vytvo≈ô√≠me rozmez√≠ bod≈Ø
    grade_ranges = {
        1: f"{round(reference_value * 1.0)} - 200",
        2: f"{round(reference_value * 0.9)} - {round(reference_value * 1.0) - 1}",
        3: f"{round(reference_value * 0.8)} - {round(reference_value * 0.9) - 1}",
        4: f"20 - {round(reference_value * 0.8) - 1}"
    }
    
    return grade_ranges

def vypocet_znamky(body, pohlavi, rocnik):
    """
    Vyhodnot√≠ zn√°mku na z√°kladƒõ poƒçtu bod≈Ø, pohlav√≠ a roƒçn√≠ku studenta.
    """
    if body is None:
        return None
    
    base_reference = 130 if pohlavi.lower() == "chlapec" else 110  # V√Ωchoz√≠ hodnoty
    reference_value = base_reference * (0.9 ** (9 - rocnik))  # P≈ôizp≈Øsoben√≠ podle roƒçn√≠ku
    
    # Definov√°n√≠ bodov√Ωch hranic
    if body >= round(reference_value * 1.0):
        return 1
    elif body >= round(reference_value * 0.9):
        return 2
    elif body >= round(reference_value * 0.8):
        return 3
    elif body >= 20:  # Minim√°ln√≠ hranice pro zn√°mku 4
        return 4
    else:
        return 5  # Pokud m√° m√©nƒõ ne≈æ 20 bod≈Ø

def inicializovat_databazi():
    """Inicializuje datab√°zi v√Ωchoz√≠mi daty, pokud je pr√°zdn√°."""
    try:
        # Kontrola, zda datab√°ze obsahuje ≈°koln√≠ roky
        skolni_roky_count = SkolniRok.query.count()
        if skolni_roky_count == 0:
            print("üîÑ Importuji v√Ωchoz√≠ ≈°koln√≠ roky...")
            try:
                import_skolni_roky("skolni_roky.xlsx")
                print("‚úÖ ≈†koln√≠ roky √∫spƒõ≈°nƒõ importov√°ny")
                
                # Nastaven√≠ aktu√°ln√≠ho ≈°koln√≠ho roku
                aktualni_rok = datetime.now().year
                if datetime.now().month < 9:  # P≈ôed z√°≈ô√≠m pou≈æ√≠v√°me p≈ôedchoz√≠ ≈°koln√≠ rok
                    aktualni_rok -= 1
                SkolniRok.nastav_aktualni_rok(aktualni_rok)
                print(f"‚úÖ Nastaven aktu√°ln√≠ ≈°koln√≠ rok: {aktualni_rok}/{aktualni_rok+1}")
            except Exception as e:
                print(f"‚ùå Chyba p≈ôi importu ≈°koln√≠ch rok≈Ø: {str(e)}")
        
        # Kontrola, zda datab√°ze obsahuje ≈æ√°ky
        zaci_count = Zak.query.count()
        if zaci_count == 0:
            print("üîÑ Importuji v√Ωchoz√≠ ≈æ√°ky...")
            try:
                import_zaci("zaci.xlsx")
                print(f"‚úÖ Importov√°no {Zak.query.count()} ≈æ√°k≈Ø")
            except Exception as e:
                print(f"‚ùå Chyba p≈ôi importu ≈æ√°k≈Ø: {str(e)}")
        
        # Kontrola, zda datab√°ze obsahuje discipl√≠ny a bodovac√≠ syst√©m
        discipline_count = Discipline.query.count()
        if discipline_count == 0:
            print("üîÑ Importuji v√Ωchoz√≠ bodovac√≠ datab√°zi...")
            try:
                import_excel("bodovaci_databaze.xlsx")
                print(f"‚úÖ Importov√°no {Discipline.query.count()} discipl√≠n")
            except Exception as e:
                print(f"‚ùå Chyba p≈ôi importu bodovac√≠ datab√°ze: {str(e)}")
            
    except Exception as e:
        print(f"‚ùå Chyba p≈ôi inicializaci datab√°ze: {str(e)}")

# ========= ODKAZY A INFORMACE ==========

@app.route("/odkazy_a_informace/", methods=["GET", "POST"])
@app.route("/odkazy_a_informace", methods=["GET", "POST"])
@app.route("/odkazy", methods=["GET", "POST"])  # Pro zpƒõtnou kompatibilitu
def odkazy_a_informace():
    """Zobraz√≠ str√°nku s odkazy, informacemi a soubory."""
    
    # Naƒçten√≠ odkaz≈Ø z datab√°ze
    try:
        odkazy = Odkaz.query.all()
    except Exception as e:
        print(f"Chyba p≈ôi naƒç√≠t√°n√≠ odkaz≈Ø z DB: {e}")
        odkazy = []
    
    # Seskupen√≠ odkaz≈Ø podle kategori√≠
    odkazy_podle_kategorii = {}
    for odkaz in odkazy:
        if odkaz.kategorie not in odkazy_podle_kategorii:
            odkazy_podle_kategorii[odkaz.kategorie] = []
        odkazy_podle_kategorii[odkaz.kategorie].append({
            "id": odkaz.id,
            "nazev": odkaz.nazev,
            "url": odkaz.url
        })
    
    # Pokud nem√°me ≈æ√°dn√© odkazy, vytvo≈ô√≠me uk√°zkov√©
    if not odkazy_podle_kategorii:
        odkazy_podle_kategorii = {
            "Videa": [{"id": None, "nazev": "Z√°klady gymnastiky", "url": "https://example.com/video1"}],
            "ƒål√°nky": [{"id": None, "nazev": "Jak se spr√°vnƒõ protahovat", "url": "https://example.com/article1"}]
        }
    
    # Naƒçten√≠ informac√≠ z datab√°ze
    try:
        informace_db = Informace.query.order_by(Informace.datum_vytvoreni.desc()).all()
        informace = [{"text": info.text, "date": info.datum, "id": info.id} for info in informace_db]
    except Exception as e:
        print(f"Chyba p≈ôi naƒç√≠t√°n√≠ informac√≠ z DB: {e}")
        informace = [{"text": "Nezapome≈àte na ≈°koln√≠ z√°vody!", "date": datetime.now().strftime("%d.%m.%Y"), "id": None}]
    
    # Kontrola a vytvo≈ôen√≠ slo≈æky pro soubory
    upload_folder = os.path.join(app.root_path, app.config['UPLOAD_FOLDER'])
    os.makedirs(upload_folder, exist_ok=True)

    # Z√≠sk√°n√≠ seznamu nahran√Ωch soubor≈Ø
    try:
        soubory_db = Soubor.query.order_by(Soubor.datum_nahrani.desc()).all()
        uploaded_files = [(soubor.filename, soubor.id) for soubor in soubory_db]
    except Exception as e:
        print(f"Chyba p≈ôi naƒç√≠t√°n√≠ soubor≈Ø z DB: {e}")
        uploaded_files = []
        if os.path.exists(upload_folder):
            uploaded_files = [(f, None) for f in os.listdir(upload_folder) if os.path.isfile(os.path.join(upload_folder, f))]

    # Aktu√°ln√≠ datum pro formul√°≈ô
    today_date = datetime.now().strftime("%Y-%m-%d")

    # Seznam kategori√≠ pro select
    kategorie_list = list(odkazy_podle_kategorii.keys())

    return render_template(
        "odkazy_a_informace.html",
        odkazy_podle_kategorii=odkazy_podle_kategorii,
        informace=informace,
        uploaded_files=uploaded_files,
        today_date=today_date,
        kategorie_list=kategorie_list
    )

@app.route("/pridat_odkaz", methods=["POST"])
def pridat_odkaz():
    """P≈ôid√° nov√Ω odkaz do datab√°ze."""
    try:
        nazev = request.form.get("nazev", "").strip()
        url = request.form.get("url", "").strip()
        kategorie = request.form.get("kategorie", "").strip()
        
        # Vytvo≈ôen√≠ nov√© kategorie, pokud je vybr√°na mo≈ænost "nov√°"
        if kategorie == "nov√°":
            kategorie = request.form.get("nova_kategorie", "").strip()
            if not kategorie:
                flash("‚ùå Zadejte n√°zev nov√© kategorie!", "error")
                return redirect(url_for("odkazy_a_informace"))
        
        # Validace vstupn√≠ch dat
        if not nazev or not url:  # Oprava: nebo -> or
            flash("‚ùå N√°zev a URL jsou povinn√©!", "error")
            return redirect(url_for("odkazy_a_informace"))
        
        # Vytvo≈ôen√≠ nov√©ho odkazu v datab√°zi
        novy_odkaz = Odkaz(
            nazev=nazev,
            url=url,
            kategorie=kategorie
        )
        
        db.session.add(novy_odkaz)
        db.session.commit()
        
        flash("‚úÖ Odkaz byl √∫spƒõ≈°nƒõ p≈ôid√°n!", "success")
    except Exception as e:
        db.session.rollback()
        print(f"‚ùå Chyba p≈ôi p≈ôid√°n√≠ odkazu: {e}")
        flash(f"‚ùå Chyba p≈ôi p≈ôid√°n√≠ odkazu: {str(e)}", "error")
    
    return redirect(url_for("odkazy_a_informace"))

@app.route("/pridat_informaci", methods=["POST"])
def pridat_informaci():
    """P≈ôid√° novou informaci do datab√°ze."""
    try:
        text = request.form.get("text", "").strip()
        date = request.form.get("date", "")
        
        # Validace vstupn√≠ch dat
        if not text:
            flash("‚ùå Text informace je povinn√Ω!", "error")
            return redirect(url_for("odkazy_a_informace"))
        
        # Form√°tov√°n√≠ datumu
        date_obj = datetime.strptime(date, "%Y-%m-%d") if date else datetime.now()
        formatted_date = date_obj.strftime("%d.%m.%Y")
        
        # Vytvo≈ôen√≠ nov√© informace v datab√°zi
        nova_informace = Informace(
            text=text,
            datum=formatted_date
        )
        
        db.session.add(nova_informace)
        db.session.commit()
        
        flash("‚úÖ Informace byla √∫spƒõ≈°nƒõ p≈ôid√°na!", "success")
    except Exception as e:
        db.session.rollback()
        print(f"‚ùå Chyba p≈ôi p≈ôid√°n√≠ informace: {e}")
        flash(f"‚ùå Chyba p≈ôi p≈ôid√°n√≠ informace: {str(e)}", "error")
    
    return redirect(url_for("odkazy_a_informace"))

@app.route("/nahrat_soubor", methods=["POST"])
def nahrat_soubor():
    """Nahraje nov√Ω soubor do slo≈æky uploads a zaznamen√° ho v datab√°zi."""
    try:
        # Kontrola, zda byl nahr√°n soubor
        if "soubor" not in request.files:
            flash("‚ùå Nebyl vybr√°n ≈æ√°dn√Ω soubor!", "error")
            return redirect(url_for("odkazy_a_informace"))
        
        soubor = request.files["soubor"]
        
        # Kontrola, zda m√° soubor n√°zev
        if soubor.filename == "":
            flash("‚ùå Nebyl vybr√°n ≈æ√°dn√Ω soubor!", "error")
            return redirect(url_for("odkazy_a_informace"))
        
        # Kontrola, zda m√° soubor povolen√Ω form√°t
        if not allowed_file(soubor.filename):
            flash("‚ùå Nepodporovan√Ω form√°t souboru!", "error")
            return redirect(url_for("odkazy_a_informace"))
        
        # Zaji≈°tƒõn√≠ bezpeƒçnosti n√°zvu souboru
        filename = secure_filename(soubor.filename)
        
        # Kontrola duplicity n√°zvu souboru
        uploads_path = os.path.join(app.root_path, app.config["UPLOAD_FOLDER"])
        if os.path.exists(os.path.join(uploads_path, filename)):
            # P≈ôid√°n√≠ ƒçasov√©ho raz√≠tka k n√°zvu souboru
            timestamp = datetime.now().strftime("%Y%m%d%H%M%S")
            name, ext = os.path.splitext(filename)
            filename = f"{name}_{timestamp}{ext}"
        
        # Ulo≈æen√≠ souboru
        soubor.save(os.path.join(uploads_path, filename))
        
        # Zji≈°tƒõn√≠ velikosti a typu souboru
        velikost = os.path.getsize(os.path.join(uploads_path, filename))
        typ_souboru = os.path.splitext(filename)[1][1:].lower()
        
        # Z√°znam souboru v datab√°zi
        novy_soubor = Soubor(
            nazev=os.path.splitext(soubor.filename)[0],
            filename=filename,
            velikost=velikost,
            typ_souboru=typ_souboru
        )
        
        db.session.add(novy_soubor)
        db.session.commit()
        
        flash(f"‚úÖ Soubor {filename} byl √∫spƒõ≈°nƒõ nahr√°n!", "success")
    except Exception as e:
        db.session.rollback()
        print(f"‚ùå Chyba p≈ôi nahr√°v√°n√≠ souboru: {e}")
        flash(f"‚ùå Chyba p≈ôi nahr√°v√°n√≠ souboru: {str(e)}", "error")
    
    return redirect(url_for("odkazy_a_informace"))

@app.route("/smazat_odkaz/<int:odkaz_id>", methods=["GET"])
def smazat_odkaz(odkaz_id):
    """Sma≈æe odkaz z datab√°ze."""
    try:
        odkaz = Odkaz.query.get_or_404(odkaz_id)
        
        db.session.delete(odkaz)
        db.session.commit()
        
        flash("‚úÖ Odkaz byl √∫spƒõ≈°nƒõ smaz√°n!", "success")
    except Exception as e:
        db.session.rollback()
        print(f"‚ùå Chyba p≈ôi maz√°n√≠ odkazu: {e}")
        flash(f"‚ùå Chyba p≈ôi maz√°n√≠ odkazu: {str(e)}", "error")
    
    return redirect(url_for("odkazy_a_informace"))

@app.route("/smazat_informaci/<int:informace_id>", methods=["GET"])
def smazat_informaci(informace_id):
    """Sma≈æe informaci z datab√°ze."""
    try:
        informace = Informace.query.get_or_404(informace_id)
        
        db.session.delete(informace)
        db.session.commit()
        
        flash("‚úÖ Informace byla √∫spƒõ≈°nƒõ smaz√°na!", "success")
    except Exception as e:
        db.session.rollback()
        print(f"‚ùå Chyba p≈ôi maz√°n√≠ informace: {e}")
        flash(f"‚ùå Chyba p≈ôi maz√°n√≠ informace: {str(e)}", "error")
    
    return redirect(url_for("odkazy_a_informace"))

@app.route("/smazat_soubor/<int:soubor_id>", methods=["GET"])
def smazat_soubor(soubor_id):
    """Sma≈æe soubor z datab√°ze a z disku."""
    try:
        soubor = Soubor.query.get_or_404(soubor_id)
        
        # Smaz√°n√≠ souboru z disku
        file_path = os.path.join(app.root_path, app.config["UPLOAD_FOLDER"], soubor.filename)
        if os.path.exists(file_path) and os.path.isfile(file_path):
            os.remove(file_path)
        
        # Smaz√°n√≠ z√°znamu z datab√°ze
        db.session.delete(soubor)
        db.session.commit()
        
        flash(f"‚úÖ Soubor {soubor.nazev} byl √∫spƒõ≈°nƒõ smaz√°n!", "success")
    except Exception as e:
        db.session.rollback()
        print(f"‚ùå Chyba p≈ôi maz√°n√≠ souboru: {e}")
        flash(f"‚ùå Chyba p≈ôi maz√°n√≠ souboru: {str(e)}", "error")
    
    return redirect(url_for("odkazy_a_informace"))

@app.route("/stahnout_soubor/<path:filename>", methods=["GET"])
def stahnout_soubor(filename):
    """St√°hne soubor ze slo≈æky uploads."""
    try:
        # Kontrola, zda soubor existuje
        uploads_path = os.path.join(app.root_path, app.config["UPLOAD_FOLDER"])
        return send_from_directory(
            uploads_path, 
            filename, 
            as_attachment=True
        )
    except Exception as e:
        print(f"‚ùå Chyba p≈ôi stahov√°n√≠ souboru: {e}")
        flash(f"‚ùå Chyba p≈ôi stahov√°n√≠ souboru: {str(e)}", "error")
        return redirect(url_for("odkazy_a_informace"))

@app.route("/nacti_vykony")
def nacti_vykony():
    """Naƒçte v√Ωkony ≈æ√°ka pro dan√Ω roƒçn√≠k."""
    zak_id = request.args.get("zak_id", type=int)
    rocnik = request.args.get("rocnik", type=int)
    
    if not zak_id or not rocnik:
        return jsonify({"success": False, "error": "Chyb√≠ povinn√© parametry"}), 400
    
    try:
        # Z√≠sk√°n√≠ aktu√°ln√≠ho ≈°koln√≠ho roku z session
        skolni_rok = session.get('vybrany_skolni_rok_od')
        if not skolni_rok:
            # Z√≠sk√°me ≈°koln√≠ rok z datab√°ze
            aktualni_rok = db.session.get(SkolniRok, {"aktualni": True})
            if aktualni_rok:
                skolni_rok = aktualni_rok.rok_od
            else:
                # Pokud nen√≠ nalezen ≈æ√°dn√Ω ≈°koln√≠ rok, pou≈æijeme aktu√°ln√≠ rok
                skolni_rok = datetime.now().year
        
        # P≈ôevod na int, pokud je to rok ve form√°tu 2023/2024
        if isinstance(skolni_rok, str) and "/" in skolni_rok:
            skolni_rok = int(skolni_rok.split("/")[0])
        
        # Naƒçten√≠ v√Ωkon≈Ø z datab√°ze
        vykony = StudentScore.query.filter_by(
            zak_id=zak_id, 
            rocnik=rocnik,
            skolni_rok=skolni_rok
        ).all()
        
        # P≈ô√≠prava dat pro odpovƒõƒè
        data = []
        for vykon in vykony:
            data.append({
                "discipline_id": vykon.discipline_id,
                "vykon": vykon.vykon,
                "body": vykon.body
            })
        
        app.logger.info(f"‚úÖ Naƒçteno {len(data)} v√Ωkon≈Ø pro ≈æ√°ka {zak_id}, roƒçn√≠k {rocnik}, ≈°koln√≠ rok {skolni_rok}")
        
        return jsonify({
            "success": True,
            "vykony": data
        })
    
    except Exception as e:
        app.logger.error(f"‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ v√Ωkon≈Ø: {str(e)}")
        return jsonify({"success": False, "error": f"Chyba p≈ôi naƒç√≠t√°n√≠ v√Ωkon≈Ø: {str(e)}"}), 500
    
if __name__ == "__main__":
    print("üåê Aplikace bƒõ≈æ√≠ na adrese: http://127.0.0.1:5000/")
    app.run(debug=True, host='0.0.0.0', port=5000)    