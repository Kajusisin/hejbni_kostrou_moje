import pandas as pd
import os
from flask import current_app as app  # ‚úÖ Pou≈æit√≠ spr√°vn√©ho kontextu aplikace
from sqlalchemy import text  # ‚úÖ Nutn√© pro spr√°vn√© spou≈°tƒõn√≠ SQL p≈ô√≠kaz≈Ø
from db_config import db
from models import Discipline, Score

# üîπ Form√°tovac√≠ pravidla pro discipl√≠ny
FORMATY_DISCIPLIN = {
    "Shyby na ≈°ikm√© lavici za 2 min.": "int",
    "Kliky za 2 min.": "int",
    "≈†vihadlo za 2 min.": "int",
    "Jac√≠k za 2 min.": "int",
    "ƒålunkov√Ω bƒõh": "float",
    "≈†plh": "float",
    "Skok z m√≠sta": "int",
    "Trojskok z m√≠sta": "int",
    "Hod medicinbalem": "float",
    "Hod kriketov√Ωm m√≠ƒçkem": "float",
    "Hod o≈°tƒõpem": "float",
    "Vrh koul√≠": "float",
    "Skok dalek√Ω": "int",
    "Skok vysok√Ω": "int",
    "Bƒõh 60 m": "float",
    "Bƒõh 100 m": "float",
    "Bƒõh 150 m": "float",
    "Bƒõh 300 m": "str",
    "Bƒõh 600 m": "str",
    "Bƒõh 800 m": "str",
    "Bƒõh 1000 m": "str",
    "Bƒõh 1500 m": "str",
    "Refer√°t": "int",
    "Reprezentace ≈°koly": "int",
    "Cviƒçebn√≠ √∫bor": "int",
    "Veden√≠ rozcviƒçky": "int",
    "Aktivita mimo ≈°kolu nap≈ô. 'screen' bƒõhu": "int",
    "Aktivn√≠ p≈ô√≠stup, snaha": "int",
    "Zlep≈°en√≠ v√Ωkonu od posledn√≠ho mƒõ≈ôen√≠": "int",
    "Pomoc s organizac√≠": "int",
    "Ostatn√≠ plusov√© body": "int",
    "Ostatn√≠ m√≠nusov√© body": "int",
    "Bezpeƒçnostn√≠ riziko (gumiƒçka, boty, ‚Ä¶)": "int",
    "Nek√°ze≈à (ru≈°en√≠, neperespektov√°n√≠ pokyn≈Ø, ‚Ä¶)": "int"
}

def convert_value(value, format_type):
    """P≈ôevede hodnotu v√Ωkonu na spr√°vn√Ω form√°t podle discipl√≠ny."""
    if value is None or pd.isna(value) or str(value).strip() == "":
        return None  

    value = str(value).strip().replace(",", ".")

    if format_type == "float":
        return str(round(float(value), 2))  # ‚úÖ Vrac√≠ string pro spr√°vn√© vyhled√°v√°n√≠

    if format_type == "int":
        try:
            return str(int(float(value)))  # P≈ôevede na int a pak na string pro konzistenci
        except ValueError:
            print(f"‚ö†Ô∏è Chyba p≈ôi konverzi hodnoty '{value}' na int")
            return "0"

    if format_type == "str":  # ‚úÖ Opraveno z "text" na "str"
        parts = value.split(":")
        if len(parts) == 2:  # MM:SS
            return f"{int(parts[0]):02d}:{int(parts[1]):02d}"  
        elif len(parts) == 3:  # H:MM:SS ‚Üí M:SS
            minutes = int(parts[0]) * 60 + int(parts[1])  
            return f"{minutes}:{int(parts[2]):02d}"
        else:
            raise ValueError(f"Neplatn√Ω ƒçasov√Ω form√°t: {value}")

    return value

def import_excel(file_path):
    """Naƒçte bodovac√≠ datab√°zi z Excelu a ulo≈æ√≠ do SQL datab√°ze vƒçetnƒõ jednotky a n√°povƒõdy."""
    try:
        with app.app_context():
            # Pou≈æit√≠ no_autoflush
            with db.session.no_autoflush:
                print(f"üöÄ Spou≈°t√≠m import bodovac√≠ datab√°ze...")

                if not os.path.exists(file_path):
                    print(f"‚ùå Chyba: Soubor {file_path} neexistuje!")
                    return

                df = pd.read_excel(file_path, dtype=str)  
                print(f"‚úÖ Naƒçteno {len(df)} ≈ô√°dk≈Ø z Excelu.")

                db.session.execute(text("DELETE FROM score"))  # ‚úÖ Opraveno pro SQLAlchemy 2.x
                db.session.commit()

                for index, row in df.iterrows():
                    try:
                        nazev_discipl√≠ny = row.iloc[0].strip()  
                        vykon_hodnota = row.iloc[1].strip() if len(row) > 1 and pd.notna(row.iloc[1]) else None
                        body = int(row.iloc[2]) if len(row) > 2 and pd.notna(row.iloc[2]) else None
                        jednotka = row.iloc[3].strip() if len(row) > 3 and pd.notna(row.iloc[3]) else "NEZAD√ÅNO"
                        napoveda = row.iloc[4].strip() if len(row) > 4 and pd.notna(row.iloc[4]) else "NEZAD√ÅNO"

                        if not nazev_discipl√≠ny or vykon_hodnota is None or body is None:
                            print(f"‚ö†Ô∏è P≈ôeskakuji ≈ô√°dek {index}: Chybƒõj√≠c√≠ data")
                            continue  

                        discipline = Discipline.query.filter_by(nazev=nazev_discipl√≠ny).first()
                        if not discipline:
                            discipline = Discipline(nazev=nazev_discipl√≠ny, jednotka=jednotka, napoveda=napoveda)
                            db.session.add(discipline)
                            db.session.commit()

                        format_type = FORMATY_DISCIPLIN.get(nazev_discipl√≠ny, "float")
                        vykon_hodnota = convert_value(vykon_hodnota, format_type)

                        # ‚úÖ Rozpozn√°n√≠, zda se jedn√° o plusov√© nebo m√≠nusov√© body
                        is_bonus = body > 0  # Bonusov√© body
                        is_penalty = body < 0  # Penalizaƒçn√≠ body

                        new_score = Score(discipline_id=discipline.id, vykon=str(vykon_hodnota).strip(), body=body)
                        db.session.add(new_score)

                    except Exception as e:
                        print(f"‚ùå Chyba p≈ôi zpracov√°n√≠ ≈ô√°dku {index}: {e}")

                db.session.commit()
                print("‚úÖ Import bodovac√≠ datab√°ze dokonƒçen!")
                return True
    except Exception as e:
        db.session.rollback()
        print(f"‚ùå Chyba p≈ôi importu bodovac√≠ datab√°ze: {e}")
        return False

if __name__ == "__main__":
    from flask import Flask
    app = Flask(__name__)
    
    # üîπ P≈ôipojen√≠ k datab√°zi
    from db_config import db, DATABASE_URI
    app.config["SQLALCHEMY_DATABASE_URI"] = DATABASE_URI
    app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = False
    db.init_app(app)

    with app.app_context():  # ‚úÖ Spr√°vn√Ω Flask kontext pro datab√°zi
        import_excel("bodovaci_databaze.xlsx")
