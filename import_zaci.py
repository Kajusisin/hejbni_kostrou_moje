from flask import Flask
from flask_sqlalchemy import SQLAlchemy
import pandas as pd
import re
from db_config import db, DATABASE_URI
from models import Zak

# Inicializace Flask aplikace
app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = DATABASE_URI
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db.init_app(app)

def import_zaci(soubor):
    try:
        with app.app_context():
            # Pou≈æit√≠ no_autoflush
            with db.session.no_autoflush:
                print(f"üöÄ Spou≈°t√≠m import ≈æ√°k≈Ø z {soubor}...")
                # Naƒçten√≠ dat z Excelu
                df = pd.read_excel(soubor)
                
                # Zpracov√°n√≠ ka≈æd√©ho ≈æ√°ka
                for index, row in df.iterrows():
                    jmeno = row['Jm√©no'].strip()
                    prijmeni = row['P≈ô√≠jmen√≠'].strip()
                    
                    # O≈°et≈ôen√≠ nepovinn√Ωch hodnot s defaulty
                    cislo_tridy = int(row['ƒå√≠slo t≈ô√≠dy']) if pd.notna(row.get('ƒå√≠slo t≈ô√≠dy')) else None
                    # Zpracov√°n√≠ p√≠smena t≈ô√≠dy bez teƒçky
                    pismeno_tridy = row['P√≠smeno t≈ô√≠dy'].strip() if pd.notna(row.get('P√≠smeno t≈ô√≠dy', '')) else None
                    # Zaji≈°tƒõn√≠, ≈æe p√≠smeno t≈ô√≠dy nezaƒç√≠n√° teƒçkou
                    if pismeno_tridy and pismeno_tridy.startswith('.'):
                        pismeno_tridy = pismeno_tridy[1:]
                    pohlavi = row.get('Pohlav√≠', 'neuvedeno').strip().lower()
                    
                    # ‚úÖ O≈°et≈ôen√≠ chybƒõj√≠c√≠ch sloupc≈Ø
                    rok_nastupu_2_stupen = int(row['Rok n√°stupu na 2. stupe≈à']) if 'Rok n√°stupu na 2. stupe≈à' in row and pd.notna(row['Rok n√°stupu na 2. stupe≈à']) else None
                    
                    # ‚úÖ Kontrola odchodu pro absolventy
                    skolni_rok_odchodu_od = int(row['≈†koln√≠ rok odchodu z 2. stupnƒõ od']) if '≈†koln√≠ rok odchodu z 2. stupnƒõ od' in row and pd.notna(row.get('≈†koln√≠ rok odchodu z 2. stupnƒõ od')) else None
                    skolni_rok_odchodu_do = int(row['≈†koln√≠ rok odchodu z 2. stupnƒõ do']) if '≈†koln√≠ rok odchodu z 2. stupnƒõ do' in row and pd.notna(row.get('≈†koln√≠ rok odchodu z 2. stupnƒõ do')) else None

                    # Pokud chyb√≠ rok n√°stupu, nelze zpracovat ≈æ√°ka
                    if rok_nastupu_2_stupen is None:
                        print(f"‚ö†Ô∏è Pro ≈æ√°ka {jmeno} {prijmeni} chyb√≠ rok n√°stupu - p≈ôeskakuji")
                        continue

                    # ‚úÖ Ovƒõ≈ôen√≠, zda ≈æ√°k u≈æ existuje
                    existing_zak = Zak.query.filter_by(jmeno=jmeno, prijmeni=prijmeni).first()
                    if existing_zak:
                        existing_zak.cislo_tridy = cislo_tridy
                        existing_zak.pismeno_tridy = pismeno_tridy
                        existing_zak.pohlavi = pohlavi
                        
                        # Aktualizujeme pouze hodnoty, kter√© existuj√≠
                        if rok_nastupu_2_stupen is not None:
                            existing_zak.rok_nastupu_2_stupen = rok_nastupu_2_stupen
                        if skolni_rok_odchodu_od is not None:
                            existing_zak.skolni_rok_odchodu_od = skolni_rok_odchodu_od
                        if skolni_rok_odchodu_do is not None:
                            existing_zak.skolni_rok_odchodu_do = skolni_rok_odchodu_do
                    else:
                        new_zak = Zak(
                            jmeno=jmeno,
                            prijmeni=prijmeni,
                            cislo_tridy=cislo_tridy,
                            pismeno_tridy=pismeno_tridy,
                            pohlavi=pohlavi,
                            rok_nastupu_2_stupen=rok_nastupu_2_stupen,
                            skolni_rok_odchodu_od=skolni_rok_odchodu_od,
                            skolni_rok_odchodu_do=skolni_rok_odchodu_do
                        )
                        db.session.add(new_zak)

                # Commit na konec
                db.session.commit()
                print("‚úÖ Import ≈æ√°k≈Ø dokonƒçen!")
                return True
    except Exception as e:
        db.session.rollback()
        print(f"‚ùå Chyba p≈ôi importu ≈æ√°k≈Ø: {e}")
        return False

if __name__ == "__main__":
    with app.app_context():
        db.create_all()
        print(f"üìä Test datab√°ze: Zak.query.first() = {Zak.query.first()}")
        import_zaci("zaci.xlsx")
